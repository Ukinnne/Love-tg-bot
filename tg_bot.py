import os
import random
import json
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time

load_dotenv()

TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scheduled_times = {}

async def load_love_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        with open('messages.json', 'r', encoding='utf-8') as file:
            messages = json.load(file)
            return messages
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
        # –§–æ–ª–±—ç–∫ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        return [
            "–Ø —Ç–µ–±—è –ª—é–±–ª—é! ‚ù§Ô∏è",
            "–¢—ã —Å–∞–º–æ–µ –ª—É—á—à–µ–µ, —á—Ç–æ —Å–æ –º–Ω–æ–π —Å–ª—É—á–∏–ª–æ—Å—å! üíñ",
            "–° —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ! üåü",
            "–¢—ã –º–æ–µ —Å–æ–ª–Ω—ã—à–∫–æ! ‚òÄÔ∏è"
        ]

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ª—é–±–≤–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ (0-23 —á–∞—Å–∞)
    times_left = [f"{i}:00" for i in range(0, 12)]
    times_right = [f"{i}:00" for i in range(12, 24)]
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=left, callback_data=f"time_{i}"),
                InlineKeyboardButton(text=right, callback_data=f"time_{i+12}")
            ] for i, (left, right) in enumerate(zip(times_left, times_right))
        ]
    )
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('time_'))
async def process_time_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    await callback_query.answer()  # –í–∞–∂–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    
    try:
        user_id = callback_query.from_user.id
        selected_hour = int(callback_query.data.split('_')[1])
        
        if selected_hour < 0 or selected_hour > 23:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_scheduled_times[user_id] = selected_hour
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        old_job = scheduler.get_job(f"love_msg_{user_id}")
        if old_job:
            old_job.remove()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        scheduler.add_job(
            send_love_message,
            'cron',
            hour=selected_hour,
            minute=0,
            args=[user_id],
            id=f"love_msg_{user_id}"
        )
        
        await callback_query.message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {selected_hour}:00!"
        )
        
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def send_love_message(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ª—é–±–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        love_messages = await load_love_messages()
        random_message = random.choice(love_messages)
        await bot.send_message(user_id, random_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@dp.message(Command("current_time"))
async def show_current_time(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    if user_id in user_scheduled_times:
        await message.reply(
            f"–°–µ–π—á–∞—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {user_scheduled_times[user_id]}:00"
        )
    else:
        await message.reply("–¢—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ù–∞–ø–∏—à–∏ /start")

async def on_startup():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    if not scheduler.running:
        scheduler.start()
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())